package org.codingtest.set;

import java.util.Arrays;
import java.util.HashSet;
import java.util.stream.Collectors;

public class 폰켓몬 {

    /*  당신은 폰켓몬을 잡기 위한 오랜 여행 끝에 홍 박사님 연구실에 도착했습니다. 홍 박사님은 당신에게 자신의 연구실에 있는 N마리의 폰켓몬 중
    *   N/2마리를 가져가도 좋다고 했습니다. 홍 박사님 연구실의 폰켓몬은 종류에 따라 번호를 붙여 구분합니다. 따라서 같은 종류의 폰켓몬은 같은
    *   번호를 가집니다. 예를 들어 연구실에 총 4마리의 폰켓몬이 있고 각 폰켓몬의 번호가 [3번, 1번, 2번, 3번] 이면 이는 3번 폰켓몬이 2마리,
    *   1번 폰켓몬 1마리, 2번 폰켓몬 1마리가 있음을 나타냅니다. 이때 4마리의 폰켓몬 중 절반인 2마리를 고르는 방법은 다음과 같이 6가지가 있습니다.
    *       * 3번, 1번 폰켓몬을 선택
    *       * 3번, 2번 폰켓몬을 선택
    *       * 3번, 3번 폰켓몬을 선택
    *       * 1번, 2번 폰켓몬을 선택
    *       * 1번, 3번 폰켓몬을 선택
    *       * 2번, 3번 폰켓몬을 선택
    *   이때 3번 폰켓몬과 3번 폰켓몬을 선택하는 방법은 한 종류의 폰켓몬만 가지는 것이지만 다른 방법은 모두 두 종류의 폰켓몬을 가질 수 있습니다.
    *   따라서 지금 예에서는 가질 수 있는 폰켓몬 종류 수의 최댓값이 2가 됩니다. 당신은 최대한 다양한 종류의 폰켓몬을 가지길 원하기 때문에 최대한
    *   많은 종류의 폰켓몬을 얻을 수 있는 N/2마리를 선택하려 합니다. N마리 폰켓몬의 종류 번호가 담긴 배열 nums가 매개변수로 주어질 때 N/2마리의
    *   폰켓몬을 선택하는 방법 중 가장 많은 종류의 폰켓몬을 선택하는 방법을 찾아 폰켓몬 종류 번호의 개수를 반환하는 solution() 함수를 완성해주세요.
    *
    *   - 제약 조건
    *   1. nums는 폰켓몬의 종류 번호가 담긴 1차원 배열입니다.
    *   2. nums의 길이(N)는 1 이상 10,000 이하의 자연수이며 항상 짝수입니다.
    *   3. 폰켓몬의 종류 번호는 1 이상 200,000 이하의 자연수입니다.
    *   4. 가장 많은 종류의 폰켓몬을 선택하는 방법이 여러 가지일 때에도, 선택할 수 있는 폰켓몬 종류 개수의 최댓값 하나만 반환하면 됩니다.
    *
    *   - 시간 복잡도 분석
    *   N은 nums의 길이입니다. nums를 해시셋으로 변환할 때 시간 복잡도는 O(N)이고, 폰켓몬 수를 구하고 선택할 때의 시간 복잡도는 O(1)입니다.
    *   따라서 최종 시간 복잡도는 O(N)입니다.
    */
    public static int solution(int[] nums) {
        // 1. nums 리스트에서 중복을 제거한 집합(set)을 구함
        HashSet<Integer> set = Arrays.stream(nums).boxed().collect(Collectors.toCollection(HashSet::new));
        // 2. 폰켓몬의 총 수
        int n = nums.length;
        // 3. 선택할 폰켓몬의 수
        int k = n / 2;
        // 4. 중복을 제거한 폰켓몬의 종류 수와 선택할 폰켓몬의 수 중 작은 값 반환
        return Math.min(k, set.size());
    }

    // 조금 더 직관적인 메서드를 사용하여 작성하면 한 줄로 줄일 수 있다.
    public static int solution2(int[] nums) {
        return Math.min((int) Arrays.stream(nums).distinct().count(), nums.length /2);
    }
}