package org.codingtest.dynamicprogramming;

public class Nx2타일링 {

    /*  가로 길이가 2이고 세로의 길이가 1인 직사각형의 타일이 있습니다. 이 직사각형 타일을 이용해 세로의 길이가 2이고 가로의 길이가 n인
    *   바닥을 채우려고 합니다. 타일은 가로나 세로로 배치할 수 있습니다. 예를 들어 n = 7이면 이 타일로 이렇게 채울 수 있습니다.
    *   ||三||三||
    *   직사각형의 가로의 길이 n이 주어질 때 직사각형을 채우는 방법의 수를 반환하는 solution() 함수를 완성해주세요.
    *
    *   - 제약 조건
    *   1. 가로의 길이 n은 60,000 이하의 자연수입니다.
    *   2. 경우의 수가 많아질 수 있으므로 경우의 수를 1,000,000,007로 나눈 나머지를 반환하세요.
    *
    *   - 시간 복잡도 분석
    *   N은 피보나치 문제에서 구할 N번째 항입니다. N번째 피보나치 수를 구할 때까지 반복문은 N번 수행하므로 시간 복잡도는 O(N)입니다.
    */

    public static int solution(int n) {
        // 1. 동적 계획법을 위한 배열 초기화
        // dp[i]는 가로 길이가 i일 때 바닥을 채우는 방법의 수
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;

        // 2. 가로 길이가 3부터 n까지의 각각의 경우에 대해 바닥을 채우는 방법의 수를 구함
        for (int i = 3; i <= n; i++) {
            // 3. dp[i]는 dp[i - 1]과 dp[i - 2]를 더한 값
            dp[i] = (dp[i - 1] + dp[i - 2]) % 1_000_000_007;
        }
        // 4. 바닥의 가로 길이가 n일 때 바닥을 채우는 방법의 수인 dp[n]을 반환
        return dp[n];
    }
}